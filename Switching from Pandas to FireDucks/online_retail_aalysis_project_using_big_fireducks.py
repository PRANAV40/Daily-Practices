# -*- coding: utf-8 -*-
"""Online_Retail_Aalysis_Project_Using_Big_fireducks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jcopU4wvnb_P-ee2_Ag8ki7o_xLTLtL5
"""

pip install openpyxl

pip install fireducks

# Commented out IPython magic to ensure Python compatibility.
# %load_ext fireducks.pandas
import pandas as pd
import matplotlib.pyplot as plt

"""# **Data Load**"""

!wget https://archive.ics.uci.edu/static/public/352/online+retail.zip

!unzip online+retail.zip

import time
stime = time.time()

# Commented out IPython magic to ensure Python compatibility.
# %%fireducks.profile
# df = pd.read_excel('Online Retail.xlsx', dtype={'InvoiceNo': 'string', 'StockCode': 'string', 'Description': 'string', 'Country': 'string'})
# df = pd.concat([df] * 60)
# df.shape

df.head(5)

df.shape

print("Number of Rows:",df.shape[0])
print("Number of Columns:",df.shape[1])

df.info()

"""# **Data Cleaning: Handle Missing Values**"""

df.isnull().sum()

df[df.Description.isnull()]

df[df.StockCode=='22139'].Description.mode()

most_freq = df[["StockCode","Description"]].value_counts().reset_index()
most_freq

most_freq[most_freq.StockCode=='85123A'].head(1)

most_freq = most_freq.groupby("StockCode").head(1)
most_freq

most_freq.columns =["StockCode","freq_Description","count"]
df1 = df.merge(most_freq, on='StockCode', how='left')
df1

df1['Description'] = df1['freq_Description']
df1.head()

df1.isnull().sum()

df1.dropna(subset=['Description'], inplace=True)
df1.isnull().sum()

df1.drop(columns=['freq_Description','count'], inplace=True)
 df1.head()

df1.describe()

df1[df1.UnitPrice<0]

df2 = df1[(df1.UnitPrice>0) & (df1.Quantity>0)]
df2.describe()

df2.Quantity.quantile(0.9999)

df2[df2.Quantity>1500]

"""**Featre Engineering: Create New Columns**"""

df3 = df2.copy()
df3['TotalSales'] = df3['Quantity'] * df3['UnitPrice']
df3.head(3)

df3['Month'] = df3['InvoiceDate'].dt.month
df3.head()

"""# **Visulization & EDA**

####1. Plot Monthly Sales
"""

monthly_sales = df3.groupby('Month')['TotalSales'].sum()
monthly_sales.plot(kind='line',marker='o')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Monthly Sales')
plt.grid()
plt.show()

"""**Insghts**

Total sales started rising up in August having a peek in November. This is likely due to the holiday season in the end of the year.

#### 2. Top 5 Countries By Sales
"""

# prompt: plot horizontal bar chart for top 5 countries b total sales
top5_countries = df3.groupby('Country')['TotalSales'].sum().sort_values(ascending=False).head(5)
top5_countries

plt.figure(figsize=(10, 5))
top5_countries.plot(kind='barh')
plt.xlabel('Total Sales')
plt.ylabel('Country')
plt.title('Top 5 Countries by Total Sales')
plt.show()

# prompt: plot same chart as above but this time use percentage contribution. Show % on the bar


country_wise_sales = df3.groupby('Country')['TotalSales'].sum()
total_sales = country_wise_sales.sum()

top5_countries = df3.groupby('Country')['TotalSales'].sum().sort_values(ascending=False).head(5)
percentage_contribution = (top5_countries / total_sales) * 100

# Create the bar plot
plt.figure(figsize=(10, 5))
bars = plt.barh(percentage_contribution.index, percentage_contribution.values)
plt.xlabel('Percentage Contribution to Total Sales')
plt.ylabel('Country')
plt.title('Top 5 Countries by Percentage Contribution to Total Sales')

# Add percentage values on the bars
for bar, percentage in zip(bars, percentage_contribution):
    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f'{percentage:.1f}%',
             va='center', ha='left')

plt.show()

product_wise_sales = df3.groupby('StockCode')['TotalSales'].sum()
product_wise_sales

top5_products = product_wise_sales.sort_values(ascending=False).head(5)
top5_products.plot(kind='barh',color='skyblue')
plt.xlabel('Total Sales')
plt.ylabel('StockCode')
plt.title('Top 5 Products by Total Sales')
plt.show()

product_wise_sales.sort_values(ascending=False)

product_wise_sales.sum()

df3[df3.StockCode=='DOT']

for stock_code in top5_products.index:
  descrption = df3[df3.StockCode==stock_code].Description.iloc[0]
  print(f"{stock_code} ==> {descrption}")

total_sales = product_wise_sales.sum()
percentages = (top5_products / total_sales) * 100

plt.figure(figsize=(10, 5))
bars = plt.barh(top5_products.index, percentages)
plt.xlabel('Percentage Contribution to Total Sales')
plt.ylabel('Product Stock Code')
plt.title('Top 5 Products by Percentage Contribution to Total Sales')
plt.grid(axis='x')

for bar, percentage in zip(bars, percentages):
    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2, f'{percentage:.1f}%', va='center')

plt.show()

"""#### 4. RFM Analysis

Recency,Frequency,Monetary
"""

current_date = df3['InvoiceDate'].max() + pd.Timedelta(days=1)
current_date

rfm = df3.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (current_date - x.max()).days,
    'InvoiceNo': 'count',
    'TotalSales': 'sum'
})
rfm.columns = ['Recency', 'Frequency', 'Monetary']
rfm.head(5)

df3[df3.CustomerID==12346]

df3[df3.CustomerID==12347]['TotalSales'].sum()

rfm['R_Segment'] = pd.qcut(rfm['Recency'], 4, labels=[4, 3, 2, 1])
rfm['F_Segment'] = pd.qcut(rfm['Frequency'], 4, labels=[1,2,3,4])
rfm['M_Segment'] = pd.qcut(rfm['Monetary'], 4, labels=[1,2,3,4])
rfm['RFM_Score'] = rfm[['R_Segment','F_Segment','M_Segment']].sum(axis=1)
rfm

#customer with highest RFM Scores
rfm.sort_values('RFM_Score', ascending=False)

"""#### 5. Customer Churn Analysis"""

df3.head(5)

# Create a basket matrix for association rule mining
customer_last_purchase = df3.groupby('CustomerID')['InvoiceDate'].max()
customer_last_purchase.head(5)

type(customer_last_purchase)

current_date

customer_last_purchase = (current_date - customer_last_purchase).dt.days
customer_last_purchase.head(5)

#Define churn threshold (e.g., 90 days without purchase)
churn_threshold = 90
churned_customer = customer_last_purchase[customer_last_purchase > churn_threshold]
churned_customer.head(5)

print("Number of Churned Customers:", len(churned_customer))
plt.figure(figsize=(10, 5))
plt.hist(customer_last_purchase, bins=50, color='red', alpha=0.7)
plt.axvline(churn_threshold, color='black', linestyle='dashed', linewidth=2)
plt.title("Customer Churn Distribution")
plt.xlabel("Days Since Last Purchase")
plt.ylabel("Number of Customers")
plt.grid(True)
plt.show()

print(f"[{pd.__name__}] total time taken: {time.time() - stime} sec")

